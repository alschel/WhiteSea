# e <- extent(xs, ys)
# whiteSea <- crop(x, e)
# # save(whiteSea, file = '/home/mikhail/Documents/white_sea_sdm/whiteSea_all_over300_predictors.rda')
# names(whiteSea) <- marspec_layers$name[diap]
# plot(whiteSea)
#
# library(usdm)
# vif <- vifcor(x = whiteSea, th = 0.8)
# plot(vif(x), type = 'h', las= 2)
# usdm::exclude()
#
###### reproducing Naimi's youtube way
library(dismo)
library(sdmpredictors)
library(usdm)
# first to determone the extent
xs <- c(32, 45)
ys <- c(63.5, 67)
e = extent( xs , ys)
dismo_CL <- gbif("Clione", species="limacina", ext = e, geo = T )
dismo_LH <- gbif("Limacina", species="helicina", ext = e, geo = T )
# View(dismo_CL)
# CL
class(dismo_CL)
is.na(dismo_CL$lon) #thank god no nas here
is.na(dismo_CL$lat)
dismo_CL$species <- 1
sp_CL <- dismo_CL[,c('lon', 'lat', 'species')]
head(sp_CL)
coordinates(sp_CL) <- ~lon + lat
class(sp_CL)
head(sp_CL)
# LH
class(dismo_LH)
is.na(dismo_LH$lon) #thank god no nas here
is.na(dismo_LH$lat)
dismo_LH$species <- 1
sp_LH <- dismo_LH[,c('lon', 'lat', 'species')]
head(sp_LH)
coordinates(sp_LH) <- ~lon + lat
class(sp_LH)
head(sp_LH)
#some exploration
both_depth <- list(-dismo_CL$depth,
-dismo_LH$depth)
names(both_depth) <- c("Clione\n limacina", "Limacina\n helicina")
boxplot(both_depth,
main = "Depth of occurence", las = 2)
#predictors
# first to select layers
lays <- list_layers(datasets=c(), marine = T)
lays <- lays[which(lays$dataset_code != 'Freshwater'),]
# selection by expertise mainly
# [1] "Calcite (mean)",  [3] "Chlorophyll A (mean)"  [12] "Dissolved oxygen"
# [13] "Nitrate" [16] "pH"  [18] "Salinity" [21] "Sea surface temperature (mean)"
# [22] "Sea surface temperature (minimum)"
# [23] "Sea surface temperature (range)"
# [24] "Bathymetry (minimum)" [26] "Bathymetry (mean)" [33] "Bathymetric slope"   [38] "Sea surface salinity (annual range)"
# [40] "Sea surface temperature (annual mean)"
# [41] "Sea surface temperature (coldest ice-free month)"  [88] "Current velocity (maximum at mean depth)"
# [89] "Current velocity (maximum at min depth)" [127] "Iron concentration (mean at mean depth)"
# [181] "Nitrate concentration (mean at mean depth)" [217] "Carbon phytoplankton biomass (mean at mean depth)"
# [218] "Carbon phytoplankton biomass (mean at min depth)" [230] "Carbon phytoplankton biomass (longterm min at min depth)"
# [235] "Primary production (mean at mean depth)" [287] "Sea ice concentration (maximum)"
# [288] "Sea ice concentration (mean)"
# [289] "Sea ice concentration (minimum)"  [293] "Sea ice thickness (maximum)"
# [294] "Sea ice thickness (mean)"
chos <- c(1,3,12, 13,16,
18, 21, 22, 23, 24,
26, 33, 38, 40, 41,
88, 89, 127, 181, 217,
218, 230, 235, 287,288,
289, 293, 294)
lays$name
# View(lays)
#outputing
# write.table(x = lays, file = '/home/mikhail/Documents/white_sea_sdm/predictors_seas.csv', quote = F, sep = '\t')
# lays$layer_code
table(lays$dataset_code)
marspec_layers <- lays[which(lays$dataset_code == 'MARSPEC'),]
chosen_layers <- lays[chos,]
#some exploratory analysis
# View(marspec_layers)
# which layers to use?
# We derived seven geophysical variables from a
# high-resolution raster grid representing depth of the seafloor (bathymetry) to characterize six
# facets of topographic complexity (east–west and north–south components of aspect, slope,
#                                   concavity of the seafloor, and plan and profile curvature) and distance from shore. We further
# derived 10 bioclimatic variables describing the annual mean, range, variance, and extreme
# values for temperature and salinity from long-term monthly climatological means obtained
# from remotely sensed and in situ oceanographic observations.
x <- load_layers(chosen_layers$layer_code, datadir = tempdir())
e <- extent(xs, ys)
whiteSea <- crop(x, e)
names(whiteSea) <- chosen_layers$name
par(mar = rep(1.2, 4)); plot(whiteSea)
# sdm package time
# class(whiteSea)
# the object is not alike sdm vignette
whiteSea <- stack(whiteSea)
class(whiteSea)
plot(whiteSea[[1:15]])
plot(whiteSea[[16:28]])
#uncertainty measures
v1 <- vifstep(whiteSea)
v2 <- vifcor(whiteSea, th = 0.9)
biom <- exclude(whiteSea, vif = v2)
plot(biom)
#
plot(biom[[1]])
plot(sp_CL, cex = 0.5, pch = 1, col = 'red', add = T)
plot(sp_LH, cex = 0.5, pch = 2, col = 'blue', add =T)
proj4string(sp_CL) <- proj4string(raster())
proj4string(sp_LH) <- proj4string(raster())
# mapview::mapview(sp_CL)
# CL data and trainig
d_CL <- sdmData(species ~ ., sp_CL, predictors = biom, bg = list(n = 350))
d_CL
m_CL <- sdm(formula = species ~ ., d_CL, methods = 'rf', replication = 'boot', n = 10)
roc(m_CL)
m_CL
#which model to use? best performance
# CL
eval_CL <- getEvaluation(m_CL)
#which are the best model here ?
CL_which <- which.max(eval_CL$AUC)
p_CL <-predict(m_CL[[CL_which]],newdata= whiteSea,filename='p3.img', overwrite = T)# many commonly used raster format is supported (throughplot(p1)
plot(p_CL)
# LH data and trainig
d_LH <- sdmData(species ~ ., sp_LH, predictors = biom, bg = list(n = 350))
d_LH
m_LH <- sdm(formula = species ~ ., d_LH, methods = 'rf', replication = 'boot', n = 10)
roc(m_LH)
m_LH
# LH
eval_LH <- getEvaluation(m_LH)
#which are the best model here ?
LH_which <- which.max(eval_LH$AUC)
p_LH <-predict(m_LH[[LH_which]],newdata= whiteSea,filename='p4.img', overwrite = T)# many commonly used raster format is supported (throughplot(p1)
plot(p_LH)
#together
par(mfrow = c(1,2))
plot(p_CL, main = 'Clione limacina prediction'); plot(p_LH, main = 'Limacina helicina prediction')
#variables importance
vi_CL <- getVarImp(m_CL, id=CL_which)
vi_LH <- getVarImp(m_LH, id=LH_which)
par(mfrow = c(1,2),
mar = c (12,1,1,1))
barplot(vi_CL@varImportance$AUCtest, names = vi_CL@variables, las = 2, cex.names = 0.8,
main = 'Variables importance, C. limacina')
abline(h = 0.005, lty = 2)
barplot(vi_LH@varImportance$AUCtest, names = vi_LH@variables, las = 2, cex.names = 0.8,
main = 'Variables importance, L. helicina')
abline(h = 0.005, lty = 2)
###checking out all layers
library(usdm)
x <- load_layers(lays$layer_code, datadir = tempdir())
lays$layer_code
rm(list = ls())
#clearence and libraries
rm(list = ls())
# library(sdmpredictors)
# library(rgbif)
# library(maps)
# # library(leaflet)
# library(sdm)
#
# maps::map(ylim = c(60, 70), xlim = c(30, 50))
# xs <- c(32, 45)
# ys <- c(63.5, 67)
# abline(v = xs, lty  = 1)
# abline(h = ys, lty  = 1)
# #reading in occurences
# CL <- occ_search(scientificName = 'Clione limacina', decimalLatitude = paste(ys, collapse = ','), decimalLongitude = paste(xs, collapse = ','))
# LH <- occ_search(scientificName = 'Limacina helicina', decimalLatitude = paste(ys, collapse = ','), decimalLongitude = paste(xs, collapse = ','))
# #View(CL$data)
# # plotting occurences
# maps::map(ylim = c(60, 70), xlim = c(30, 50), fill = T, col = 'grey')
# points(x = CL$data$decimalLongitude,
#            CL$data$decimalLatitude, pch = '.', col = 'red')
# points(x = LH$data$decimalLongitude,
#            LH$data$decimalLatitude, pch = '.', col = 'blue')
#
# #predictors
# # first to select layers
# lays <- list_layers(datasets=c(), marine = T)
# lays <- lays[which(lays$dataset_code != 'Freshwater'),]
# View(lays)
# #outputing
# # write.table(x = lays, file = '/home/mikhail/Documents/white_sea_sdm/predictors_seas.csv', quote = F, sep = '\t')
# # lays$layer_code
# table(lays$dataset_code)
# marspec_layers <- lays[which(lays$dataset_code == 'MARSPEC'),]
# # View(marspec_layers)
# # which layers to use?
# # We derived seven geophysical variables from a
# # high-resolution raster grid representing depth of the seafloor (bathymetry) to characterize six
# # facets of topographic complexity (east–west and north–south components of aspect, slope,
# #                                   concavity of the seafloor, and plan and profile curvature) and distance from shore. We further
# # derived 10 bioclimatic variables describing the annual mean, range, variance, and extreme
# # values for temperature and salinity from long-term monthly climatological means obtained
# # from remotely sensed and in situ oceanographic observations.
#
#
#
# # x <- load_layers(c("BO2_tempmin_ss", "BO_salinity", "BO_bathymax", "MS_biogeo06_bathy_slope_5m"), datadir = tempdir())
# # e <- extent(xs, ys)
# # whiteSea <- crop(x, e)
# # plot(whiteSea)
# diap <- seq_along(marspec_layers$layer_code)# [1:10]
# x <- load_layers(marspec_layers$layer_code[diap], datadir = tempdir())
# e <- extent(xs, ys)
# whiteSea <- crop(x, e)
# names(whiteSea) <- marspec_layers$name[diap]
# plot(whiteSea)
#
# # sdm package time
# class(whiteSea)
# # the object is not alike sdm vignette
# whiteSea <- stack(whiteSea)
# # now it is
# plot(whiteSea)
#
# #next occurence
# # they are to be of "SpatialPointsDataFrame" class
# # View(CL$data$decimalLatitude)
# ##### 1 Clione limacina
# # Generate 100 random points for no-presence data
# set.seed(90)
# bg_spdf_WS <- sampleRandom(whiteSea, size = 350, sp = T)
#
# #coords are to be extracted
# CL_df <- data.frame(decimalLatitude = CL$data$decimalLatitude,
#                         decimalLongitude = CL$data$decimalLongitude)
# #and crs came from ppredictor object whiteSea
# CL_spdf <- SpatialPointsDataFrame(coords = CL_df,
#                                   data = CL_df,
#                                   proj4string = whiteSea@crs)
#
# # Combine presence/no-presence data
# CL_and_bg <- SpatialPointsDataFrame(coords = rbind(bg_spdf_WS@coords, CL_spdf@coords),
#                                         data = data.frame(Occurence = c(rep(0, nrow(bg_spdf_WS)), rep(1, nrow(CL_spdf)))),
#                                         proj4string = whiteSea@crs)
#
#
# # next as it goes in sdm vignette
#
# # PART ML
# d_CL <- sdmData(formula = Occurence ~ ., train = CL_and_bg, predictors= whiteSea)
# set.seed(90)
# m1_CL <-sdm(Occurence ~ ., data = d_CL, methods = 'rf', replication='sub',  test.percent = 30, n = 10)
#
# #model diagnostics
# roc(m1_CL)
#     m1_CL
#     vi_CL <- getVarImp(m1_CL, id=1)
#     par(mar = c(10,1,1,1))
#     barplot(vi_CL@varImportance$AUCtest,
#             names.arg = vi_CL@variables, cex.names = 0.5,
#             las = 2, main = 'Variables importance, C. limacina')
#     #model evaluation
#     #selecting the best-performing model
#     eval_CL <- getEvaluation(m1_CL)
#     #which are the best model here ?
#     CL_which <- which.max(eval_CL$AUC)
#
#     p1_CL <-predict(m1_CL[[CL_which]],newdata= whiteSea,filename='p1.img', overwrite = T)# many commonly used raster format is supported (throughplot(p1)
#     plot(p1_CL[[1]], main = 'Predicted distribution for C. limacina', ylim = c(63.5, 67),
#          xlim = c(30,45))
#     # plot(LH_spdf, ylim = c(63.5, 67), xlim = c(30,45), add = T)
#
#
#
#
#
# ##### 2 Limacina helicina
# #coords are to be extracted
# LH_df <- data.frame(decimalLatitude = LH$data$decimalLatitude,
#                         decimalLongitude = LH$data$decimalLongitude)
# #and crs came from ppredictor object whiteSea
#
# LH_spdf <- SpatialPointsDataFrame(coords = LH_df,
#                                   data = LH_df,
#                                   proj4string = whiteSea@crs)
#
# # Combine presence/no-presence data
# LH_and_bg <- SpatialPointsDataFrame(coords = rbind(bg_spdf_WS@coords, LH_spdf@coords),
#                                         data = data.frame(Occurence = c(rep(0, nrow(bg_spdf_WS)), rep(1, nrow(LH_spdf)))),
#                                         proj4string = whiteSea@crs)
#
#
# LH$data -> my_data
# #spdf
# LH_spdf <- sp::SpatialPointsDataFrame(coords = my_data %>% dplyr::select(decimalLongitude, decimalLatitude),
#                                           proj4string = CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"),
#                                           data = my_data %>% dplyr::select(-c(decimalLatitude, decimalLongitude)))
# plot(LH_spdf)
# # next as it goes in sdm vignette
# # Generate 100 random points for no-presence data
# set.seed(90)
# bg_spdf_WS <- sampleRandom(whiteSea, size = 350, sp = T)
#
# # PART ML
# d_LH <- sdmData(formula = Occurence ~ ., train = LH_and_bg, predictors= whiteSea)
# set.seed(90)
#     m1_LH <-sdm(Occurence ~ ., data = d_LH, methods = 'rf', replication='sub',  test.percent = 30, n = 10)
#
#     #model diagnostics
#     roc(m1_LH)
#     m1_LH
#     vi_LH <- getVarImp(m1_LH, id=1)
#     par(mar = c(10,1,1,1))
#     barplot(vi_LH@varImportance$AUCtest,
#             names.arg = vi_LH@variables, cex.names = 0.5,
#             las = 2, main = 'Variables importance, L. helicina')
#     #model evaluation
#     #selecting the best-performing model
#     eval_LH <- getEvaluation(m1_LH)
#     #which are the best model here ?
#     LH_which <- which.max(eval_LH$AUC)
#
#     p1_LH <-predict(m1_LH[[LH_which]],newdata= whiteSea,filename='p2.img', overwrite = T)# many commonly used raster format is supported (throughplot(p1)
#     plot(p1_LH[[1]], main = 'Predicted distribution for L. helicina', ylim = c(63.5, 67),
#          xlim = c(30,45))
#     # plot(LH_spdf, ylim = c(63.5, 67), xlim = c(30,45), add = T)
#
#
#     # ####two species compared
#     par(#mfrow = c(1,2),
#         mar = c(10,1,1,1))
#     #
#     barplot(vi_CL@varImportance$AUCtest, col = 'darkred',
#             names.arg = seq_along(vi_CL@variables), cex.names = 0.8,
#             las = 2, main = 'Variables importance, C. limacina vs H. limacina')
#     #
#     barplot(-vi_LH@varImportance$AUCtest, col = 'darkblue',
#             #names.arg = vi_LH@variables, cex.names = 0.5,
#             # las = 2,
#             add =T)
#
#     #distribution areas
#     par(mfrow = c(1, 2),
#         mar = rep(0.9,4))
#     plot(p1_CL[[1]], main = 'Predicted distribution for C. limacina', ylim = c(63.5, 67),
#          xlim = c(30,45))
#     plot(p1_LH[[1]], main = 'L. helicina', ylim = c(63.5, 67),
#          xlim = c(30,45))
#
#
# #uncertainty, collineaoty issues using usdm package
#     # all the available marine layers considered
# x_tot <- load_layers(lays, datadir = tempdir())
# # save(x, file = '/home/mikhail/Documents/white_sea_sdm/x_tot_all_over300_predictors.rda')
# e <- extent(xs, ys)
# whiteSea <- crop(x, e)
# # save(whiteSea, file = '/home/mikhail/Documents/white_sea_sdm/whiteSea_all_over300_predictors.rda')
# names(whiteSea) <- marspec_layers$name[diap]
# plot(whiteSea)
#
# library(usdm)
# vif <- vifcor(x = whiteSea, th = 0.8)
# plot(vif(x), type = 'h', las= 2)
# usdm::exclude()
#
###### reproducing Naimi's youtube way
library(dismo)
library(sdmpredictors)
library(usdm)
# first to determone the extent
xs <- c(32, 45)
ys <- c(63.5, 67)
e = extent( xs , ys)
dismo_CL <- gbif("Clione", species="limacina", ext = e, geo = T )
dismo_LH <- gbif("Limacina", species="helicina", ext = e, geo = T )
# View(dismo_CL)
# CL
class(dismo_CL)
is.na(dismo_CL$lon) #thank god no nas here
is.na(dismo_CL$lat)
dismo_CL$species <- 1
sp_CL <- dismo_CL[,c('lon', 'lat', 'species')]
head(sp_CL)
coordinates(sp_CL) <- ~lon + lat
class(sp_CL)
head(sp_CL)
# LH
class(dismo_LH)
is.na(dismo_LH$lon) #thank god no nas here
is.na(dismo_LH$lat)
dismo_LH$species <- 1
sp_LH <- dismo_LH[,c('lon', 'lat', 'species')]
head(sp_LH)
coordinates(sp_LH) <- ~lon + lat
class(sp_LH)
head(sp_LH)
#some exploration
both_depth <- list(-dismo_CL$depth,
-dismo_LH$depth)
names(both_depth) <- c("Clione\n limacina", "Limacina\n helicina")
boxplot(both_depth,
main = "Depth of occurence", las = 2)
#predictors
# first to select layers
lays <- list_layers(datasets=c(), marine = T)
lays <- lays[which(lays$dataset_code != 'Freshwater'),]
# selection by expertise mainly
# [1] "Calcite (mean)",  [3] "Chlorophyll A (mean)"  [12] "Dissolved oxygen"
# [13] "Nitrate" [16] "pH"  [18] "Salinity" [21] "Sea surface temperature (mean)"
# [22] "Sea surface temperature (minimum)"
# [23] "Sea surface temperature (range)"
# [24] "Bathymetry (minimum)" [26] "Bathymetry (mean)" [33] "Bathymetric slope"   [38] "Sea surface salinity (annual range)"
# [40] "Sea surface temperature (annual mean)"
# [41] "Sea surface temperature (coldest ice-free month)"  [88] "Current velocity (maximum at mean depth)"
# [89] "Current velocity (maximum at min depth)" [127] "Iron concentration (mean at mean depth)"
# [181] "Nitrate concentration (mean at mean depth)" [217] "Carbon phytoplankton biomass (mean at mean depth)"
# [218] "Carbon phytoplankton biomass (mean at min depth)" [230] "Carbon phytoplankton biomass (longterm min at min depth)"
# [235] "Primary production (mean at mean depth)" [287] "Sea ice concentration (maximum)"
# [288] "Sea ice concentration (mean)"
# [289] "Sea ice concentration (minimum)"  [293] "Sea ice thickness (maximum)"
# [294] "Sea ice thickness (mean)"
chos <- c(1,3,12, 13,16,
18, 21, 22, 23, 24,
26, 33, 38, 40, 41,
88, 89, 127, 181, 217,
218, 230, 235, 287,288,
289, 293, 294)
lays$name
# View(lays)
#outputing
# write.table(x = lays, file = '/home/mikhail/Documents/white_sea_sdm/predictors_seas.csv', quote = F, sep = '\t')
# lays$layer_code
table(lays$dataset_code)
marspec_layers <- lays[which(lays$dataset_code == 'MARSPEC'),]
chosen_layers <- lays[chos,]
#some exploratory analysis
# View(marspec_layers)
# which layers to use?
# We derived seven geophysical variables from a
# high-resolution raster grid representing depth of the seafloor (bathymetry) to characterize six
# facets of topographic complexity (east–west and north–south components of aspect, slope,
#                                   concavity of the seafloor, and plan and profile curvature) and distance from shore. We further
# derived 10 bioclimatic variables describing the annual mean, range, variance, and extreme
# values for temperature and salinity from long-term monthly climatological means obtained
# from remotely sensed and in situ oceanographic observations.
x <- load_layers(chosen_layers$layer_code, datadir = tempdir())
e <- extent(xs, ys)
whiteSea <- crop(x, e)
names(whiteSea) <- chosen_layers$name
par(mar = rep(1.2, 4)); plot(whiteSea)
# sdm package time
# class(whiteSea)
# the object is not alike sdm vignette
whiteSea <- stack(whiteSea)
class(whiteSea)
plot(whiteSea[[1:15]])
plot(whiteSea[[16:28]])
#uncertainty measures
v1 <- vifstep(whiteSea)
v2 <- vifcor(whiteSea, th = 0.9)
biom <- exclude(whiteSea, vif = v2)
plot(biom)
#
plot(biom[[1]])
plot(sp_CL, cex = 0.5, pch = 1, col = 'red', add = T)
plot(sp_LH, cex = 0.5, pch = 2, col = 'blue', add =T)
proj4string(sp_CL) <- proj4string(raster())
proj4string(sp_LH) <- proj4string(raster())
# mapview::mapview(sp_CL)
# CL data and trainig
d_CL <- sdmData(species ~ ., sp_CL, predictors = biom, bg = list(n = 350))
d_CL
m_CL <- sdm(formula = species ~ ., d_CL, methods = 'rf', replication = 'boot', n = 10)
roc(m_CL)
m_CL
#which model to use? best performance
# CL
eval_CL <- getEvaluation(m_CL)
#which are the best model here ?
CL_which <- which.max(eval_CL$AUC)
p_CL <-predict(m_CL[[CL_which]],newdata= whiteSea,filename='p3.img', overwrite = T)# many commonly used raster format is supported (throughplot(p1)
plot(p_CL)
# LH data and trainig
d_LH <- sdmData(species ~ ., sp_LH, predictors = biom, bg = list(n = 350))
d_LH
m_LH <- sdm(formula = species ~ ., d_LH, methods = 'rf', replication = 'boot', n = 10)
roc(m_LH)
m_LH
# LH
eval_LH <- getEvaluation(m_LH)
#which are the best model here ?
LH_which <- which.max(eval_LH$AUC)
p_LH <-predict(m_LH[[LH_which]],newdata= whiteSea,filename='p4.img', overwrite = T)# many commonly used raster format is supported (throughplot(p1)
plot(p_LH)
#together
par(mfrow = c(1,2))
plot(p_CL, main = 'Clione limacina prediction'); plot(p_LH, main = 'Limacina helicina prediction')
#variables importance
vi_CL <- getVarImp(m_CL, id=CL_which)
vi_LH <- getVarImp(m_LH, id=LH_which)
par(mfrow = c(1,2),
mar = c (12,1,1,1))
barplot(vi_CL@varImportance$AUCtest, names = vi_CL@variables, las = 2, cex.names = 0.8,
main = 'Variables importance, C. limacina')
abline(h = 0.005, lty = 2)
barplot(vi_LH@varImportance$AUCtest, names = vi_LH@variables, las = 2, cex.names = 0.8,
main = 'Variables importance, L. helicina')
abline(h = 0.005, lty = 2)
###checking out all layers
library(usdm)
x <- load_layers(lays$layer_code, datadir = tempdir())
e <- extent(xs, ys)
whiteSea <- crop(x, e)
